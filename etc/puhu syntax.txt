// Program Structure
program -> using* declaration*
using -> "using" IDENTIFIER ("." IDENTIFIER)* ";"
namespace -> “namespace” IDENTIFIER “{“ declaration* “}“
declaration -> (funcDec | varDec | classDec | namespace)

// Statements
funcDec -> typeName IDENTIFIER "(" parameters? ")" blockStmt
varDec -> typeName IDENTIFIER ("=" expression)? ";"
classDec -> "class" IDENTIFIER (":" IDENTIFIER) "{" member* "}"

Stmt -> expressionStmt | blockStmt | ifStmt | whileStmt | forStmt | returnStmt
expressionStmt -> expression ";"
blockStmt -> "{" (Stmt | varDec)* "}"
ifStmt -> "if" "(" expression ")" Stmt
whileStmt -> "while" "(" expression ")" Stmt
forStmt -> "for" "(" (varDec|expression)? ";" expression? ";" expression? ")" Stmt
returnStmt -> "return" expressionStmt ";"

typeName -> ("void" | "bool" | "char" | "int" | "float" | "double" | "string" | IDENTIFIER)
			| (typeName "[" "]") | (typeName "*")) "const"?
parameters -> IDENTIFIER ("," IDENTIFIER)*
member -> ("public" | "private" | "protected")? (varDec | funcDec)		
	
	
// Expressions
expression 	-> assignment | logic_or
assignment 	-> "*"* (IDENTIFIER "::")* (call ".")? (IDENTIFIER "=" expressionStmt)
logic_or 	-> logic_and ("||" logic_and)*
logic_and 	-> bit_or  ("&&" bit_or)*
bit_or 		-> bit_xor ("|" bit_xor)*
bit_xor 	-> bit_and ("^" bit_and)*
bit_and 	-> equality ("&" equality)*
equality 	-> comparison (("==" || "!=") comparison)*
comparison  -> bitshift (("<" | ">" | "<=" | ">=") bitshift)*
bitshift	-> addition (("<<" | ">>") addition)*
addition 	-> multiplication (("+" | "-") multiplication)*
multiplication -> prefix (("*" | "/" | "%") prefix)*
prefix 		-> ("-" | "+" | "++" | "--")? unary
unary 		-> ("!" | "~" | "^" | "ref" | cast) unary | postfix
postfix		-> call ("++" | "--")?
call		-> primary ( ("(" arguments? ")") | ( "." IDENTIFIER) | ("[" expression "]") )*
primary 	-> "true" | "false" | "null" | NUMBER | STRING | CHAR | ("(" expression ")") | IDENTIFIER

cast -> "(" typeName ")"
parameters -> expression ("," expression)*
