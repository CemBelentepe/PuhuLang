// Program
program     -> using* declaration*
using       -> "using" IDENTIFIER ("." IDENTIFIER)* ";"
namespace   -> “namespace” IDENTIFIER “{“ declaration* “}“
declaration -> (funcDec | varDec | classDec | namespace)

// Statements
funcDec     -> typeName IDENTIFIER "(" parameters? ")" blockStmt
varDec      -> typeName IDENTIFIER ("=" expression)? ";"
classDec    -> "class" IDENTIFIER (":" IDENTIFIER) "{" member* "}"

stmt        -> exprStmt | blockStmt | ifStmt | whileStmt | forStmt | returnStmt
exprStmt    -> expression ";"
blockStmt   -> "{" (stmt | varDec)* "}"
ifStmt      -> "if" "(" expression ")" stmt
whileStmt   -> "while" "(" expression ")" stmt
forStmt     -> "for" "(" (varDec|expression)? ";" expression? ";" expression? ")" stmt
returnStmt  -> "return" expressionStmt ";"

typeName    -> ("void" | "bool" | "char" | "int" | "float" | "double" | "string" | IDENTIFIER)
                "const"? (("[" "]" | "*") "const"?)* "const"?

// Expressions
expression 	-> binary | assignment
assignment  -> expression ASSIGNMENT expression
binary      -> prefix BIN_OP prefix
prefix 	-> ("-" | "+" | "++" | "--")? unary
// `cast` is not implemented
unary 		-> ("!" | "~" | cast) unary | postfix
// `postfix` is not implemented
postfix		-> call ("++" | "--")?
// call		-> primary ( ("(" arguments? ")")  | ("[" expression "]") | ( "." IDENTIFIER)*
call        -> primary
// namespace aware get is not implemented
// `new` is not implemented
primary 	-> "true" | "false" | "null" | NUMBER | STRING | CHAR | ("(" expression ")")
             | ("::"? (IDENTIFIER "::")* IDENTIFIER) | ("new" typeName ("(" arguments? ")"))

cast        -> "(" typeName ")"
BIN_OP      -> "||" | "&&" | "|" | "^" | "&" | "==" | "!=" | "<" | ">" | "<=" | ">="
             | "<<" | ">>" | "+" | "-" | "*" | "/" | "%" |
ASSIGNMENT  -> "=" | "+=" | "-=" | "*=" | "%=" | "/=" |  "&=" | "|=" | "^=" | "<<=" | ">>="