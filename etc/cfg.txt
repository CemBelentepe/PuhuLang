// Program
program -> using* declaration*
using -> "using" IDENTIFIER ("." IDENTIFIER)* ";"
namespace -> “namespace” IDENTIFIER “{“ declaration* “}“
declaration -> (funcDec | varDec | classDec | namespace)

// Statements
funcDec -> typeName IDENTIFIER "(" parameters? ")" blockStmt
varDec -> typeName IDENTIFIER ("=" expression)? ";"
classDec -> "class" IDENTIFIER (":" IDENTIFIER) "{" member* "}"

stmt -> expressionStmt | blockStmt | ifStmt | whileStmt | forStmt | returnStmt
expressionStmt -> expression ";"
blockStmt -> "{" (stmt | varDec)* "}"
ifStmt -> "if" "(" expression ")" stmt
whileStmt -> "while" "(" expression ")" stmt
forStmt -> "for" "(" (varDec|expression)? ";" expression? ";" expression? ")" stmt
returnStmt -> "return" expressionStmt ";"

typeName -> ("void" | "bool" | "char" | "int" | "float" | "double" | "string" | IDENTIFIER)
			| (typeName "[" "]") | (typeName "*")) "const"?

// Expressions
expression 	-> logic_or
logic_or 	-> logic_and ("||" logic_and)*
logic_and 	-> bit_or  ("&&" bit_or)*
bit_or 		-> bit_xor ("|" bit_xor)*
bit_xor 	-> bit_and ("^" bit_and)*
bit_and 	-> equality ("&" equality)*
equality 	-> comparison (("==" || "!=") comparison)*
comparison  -> bitshift (("<" | ">" | "<=" | ">=") bitshift)*
bitshift	-> addition (("<<" | ">>") addition)*
addition 	-> multiplication (("+" | "-") multiplication)*
multiplication -> prefix (("*" | "/" | "%") prefix)*
prefix 		-> ("-" | "+" | "++" | "--")? unary
unary 		-> ("!" | "~" | cast) unary | postfix
postfix		-> call ("++" | "--")?
call		-> primary ( ("(" arguments? ")")  | ("[" expression "]") | ( "." IDENTIFIER)*
primary 	-> "true" | "false" | "null" | NUMBER | STRING | CHAR | ("(" expression ")") | ("::"? (IDENTIFIER "::")* IDENTIFIER) | ("heap" typeName ("(" arguments? ")"))
